<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>wasm小记</title>
      <link href="/posts/20333/"/>
      <url>/posts/20333/</url>
      
        <content type="html"><![CDATA[<h3 id="记录一次wasm逆向"><a href="#记录一次wasm逆向" class="headerlink" title="记录一次wasm逆向"></a>记录一次wasm逆向</h3><p>最近在找工作捏，好难找boss都是已读不回，八嘎八嘎！这天突然有一个回了然后说先爬一下他们的官网试试看捏，所以就有了这篇文章~，因为这个官网是<code>wasm</code>加密所以就记录一下鸟！在说这个网站之前，我们先从简单的开始吧，先从<code>yrx</code>的第15题开始<code>aHR0cHM6Ly9tYXRjaC55dWFucmVueHVlLmNuL21hdGNoLzE1(自行b64解码)</code></p><p>1.首先打开页面抓包，我们测试几次可以发现，请求的成功与否和这个<code>m</code>有关，我们直接通过追栈的方式找到切入点.<br><img src="https://tuchuang.voooe.cn/images/2024/02/24/image.png" alt="image.png"><br><img src="https://tuchuang.voooe.cn/images/2024/02/24/imagea29563fe13c24820.png" alt="imagea29563fe13c24820.png"><br>2.我们可以看到<code>m</code>的加密很清晰,一下子我们就可以得到<code>m</code>是由<code>window.m</code>这个方法返回而来.并且有<code>wasm</code>的字样以及<code>WebAssembly.instantiate</code>的关键函数，我们就可以知道这是一个<code>wasm</code>相关的操作了，至于什么是<code>wasm</code>就自己去了解吧，因为不需要什么花里胡哨的操作，所以我们就不从分析<code>wasm</code>文件入手，我们只要能获得我们想要的结果就可以鸟！<br><img src="https://tuchuang.voooe.cn/images/2024/02/24/imagedea0ad1b04e9decb.png" alt="imagedea0ad1b04e9decb.png"><br>3.我们直接开始战斗，其实这个网站已经给我们写好了一个最基本的<code>js</code>操作<code>wasm</code>的例子了，并且适用于<code>node</code>环境(node版本最好大于18，因为小于18的<code>WebAssembly</code>可能不完整喔,并且没有<code>fetch</code>！)，我们直接将代码拿下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://match.yuanrenxue.cn/static/match/match15/main.wasm&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span></span><br><span class="line">        response.<span class="title function_">arrayBuffer</span>()</span><br><span class="line">).<span class="title function_">then</span>(<span class="function"><span class="params">bytes</span> =&gt;</span> <span class="title class_">WebAssembly</span>.<span class="title function_">instantiate</span>(bytes)).<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    instance = results.<span class="property">instance</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">q</span> = instance.<span class="property">exports</span>.<span class="property">encode</span>;</span><br><span class="line">    t1 = <span class="built_in">parseInt</span>(<span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()) / <span class="number">1000</span> / <span class="number">2</span>);</span><br><span class="line">    t2 = <span class="built_in">parseInt</span>(<span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()) / <span class="number">1000</span> / <span class="number">2</span> - <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (<span class="number">50</span>) + <span class="number">1</span>));</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">kkk</span> = <span class="variable language_">window</span>.<span class="title function_">q</span>(t1, t2).<span class="title function_">toString</span>() + <span class="string">&#x27;|&#x27;</span> + t1 + <span class="string">&#x27;|&#x27;</span> + t2;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">kkk</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这里运行会报没有<code>window</code>，这个自己补一下就好鸟~</p></blockquote><blockquote><p>我们重点观察<code>WebAssembly.instantiate</code>这个函数，他需要传入一个<a href="%22https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Typed_arrays%22">类型化数组</a> 或<code>ArrayBuffer</code>，所以这里使用了<code>response.arrayBuffer()</code>来转类型</p></blockquote><p><em>如果我们想运行本地的<code>wasm</code>肿么办，既然我们知道需要传入的类型，那我们就可以这样写鸟.</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">BufferData</span> = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./未命名.wasm&#x27;</span>))</span><br><span class="line"><span class="title class_">WebAssembly</span>.<span class="title function_">instantiate</span>(<span class="title class_">BufferData</span>).<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    instance = results.<span class="property">instance</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">q</span> = instance.<span class="property">exports</span>.<span class="property">encode</span>;</span><br><span class="line">    t1 = <span class="built_in">parseInt</span>(<span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()) / <span class="number">1000</span> / <span class="number">2</span>);</span><br><span class="line">    t2 = <span class="built_in">parseInt</span>(<span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()) / <span class="number">1000</span> / <span class="number">2</span> - <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (<span class="number">50</span>) + <span class="number">1</span>));</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">kkk</span> = <span class="variable language_">window</span>.<span class="title function_">q</span>(t1, t2).<span class="title function_">toString</span>() + <span class="string">&#x27;|&#x27;</span> + t1 + <span class="string">&#x27;|&#x27;</span> + t2;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">kkk</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><em>如果我们不想要转类型肿么办，就想直接<code>fetch</code>完直接操作捏，那么我们可以使用<code>WebAssembly.instantiateStreaming</code>来替代,两者的效果是一样滴.</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;https://match.yuanrenxue.cn/static/match/match15/main.wasm&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> <span class="title class_">WebAssembly</span>.<span class="title function_">instantiateStreaming</span>(response)).<span class="title function_">then</span>(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    instance = results.<span class="property">instance</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">q</span> = instance.<span class="property">exports</span>.<span class="property">encode</span>;</span><br><span class="line">    t1 = <span class="built_in">parseInt</span>(<span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()) / <span class="number">1000</span> / <span class="number">2</span>);</span><br><span class="line">    t2 = <span class="built_in">parseInt</span>(<span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()) / <span class="number">1000</span> / <span class="number">2</span> - <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * (<span class="number">50</span>) + <span class="number">1</span>));</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">kkk</span> = <span class="variable language_">window</span>.<span class="title function_">q</span>(t1, t2).<span class="title function_">toString</span>() + <span class="string">&#x27;|&#x27;</span> + t1 + <span class="string">&#x27;|&#x27;</span> + t2;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">kkk</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4.加密已经搞定鸟，这一题也就迎刃而解鸟<br><img src="https://tuchuang.voooe.cn/images/2024/02/24/image0dcf5d39055f84c6.png" alt="image0dcf5d39055f84c6.png"><br>5.接下来就到下一个网站鸟，这个网站的网址就不公布鸟，我们熟悉流程就好啦，还是先看请求，我们可以发现请求数据和返回数据都被加密了<br><img src="https://tuchuang.voooe.cn/images/2024/02/24/image46f2dfc5a48e7aaa.png" alt="image46f2dfc5a48e7aaa.png"><br><img src="https://tuchuang.voooe.cn/images/2024/02/24/imageb92abc04b5ed8fdb.png" alt="imageb92abc04b5ed8fdb.png"><br>6.一开始看着有点像<code>base64</code>,并且也在网站中看到了函数关键词<code>base64</code>，满心欢喜的以为拿捏住了，结果是被网站拿捏住了，岂可修！，点进去不知道是个啥，现在我们的目标是要知道<code>Ur</code>这家伙哪里来的<br><img src="https://tuchuang.voooe.cn/images/2024/02/24/imagec307e7206f07fc38.png" alt="imagec307e7206f07fc38.png"><br><img src="https://tuchuang.voooe.cn/images/2024/02/24/image54c1574f72a660b8.png" alt="image54c1574f72a660b8.png"><br>7.搜索了一下找到了它的位置，并且发现了关键字<code>wasm</code>,好的我们知道了这是个<code>wasm</code>，分析代码我们知道是经过这<code>FWt</code>来的我们点进去看看，果然看到了老熟人<code>WebAssembly.instantiateStreaming</code>,然后我们根据追栈又找到了老熟人<code>fetch</code>请求.<br><img src="https://tuchuang.voooe.cn/images/2024/02/24/imagea1c86c2743d9322b.png" alt="imagea1c86c2743d9322b.png"><br><img src="https://tuchuang.voooe.cn/images/2024/02/24/image299c9e2858507c48.png" alt="image299c9e2858507c48.png"><br><img src="https://tuchuang.voooe.cn/images/2024/02/24/image3702ea58c892a888.png" alt="image3702ea58c892a888.png"><br>8.因为这里没有帮我们直接写好<code>node</code>环境下的,不过我们照着之前的葫芦画瓢也很快，提示缺少什么函数我们就扣什么函数补上，耐心点就可以鸟！<br><img src="https://tuchuang.voooe.cn/images/2024/02/24/image59216f69af32547e.png" alt="image59216f69af32547e.png"><br><img src="https://tuchuang.voooe.cn/images/2024/02/24/image5837465e58108937.png" alt="image5837465e58108937.png"><br>9.希望看完的你在自己应对<code>wasm</code>的时候，能够施展一些拳脚~</p>]]></content>
      
      
      <categories>
          
          <category> js逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wasm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>akamai小记</title>
      <link href="/posts/46778/"/>
      <url>/posts/46778/</url>
      
        <content type="html"><![CDATA[<h3 id="记录一次akamai逆向的小细节"><a href="#记录一次akamai逆向的小细节" class="headerlink" title="记录一次akamai逆向的小细节"></a>记录一次akamai逆向的小细节</h3><p>ps：<code>难，不是靠听，易，不是靠说</code></p><blockquote><p>目标网站: </p><ol><li>aHR0cHMlM0EvL3d3dy5xYXRhcmFpcndheXMuY29tL3poLWNuL2hvbWVwYWdlLmh0bWw&#x3D;(自行b64解码)</li><li>aHR0cHMlM0EvL3d3dy5rb3JlYW5haXIuY29tLw&#x3D;&#x3D;(自行b64解码)</li></ol></blockquote><p>首先我们要知道akamai最后成功的显示就是Cookie中的<code>~1~</code>转变为<code>~0~</code>，也就是下图这种，好了废话不多说直接开始吧！嘟噜噜嘟嘟！<br> <img src="https://tuchuang.voooe.cn/images/2024/02/20/image.png" alt="image.png"><br>1.首先我们找到我们的目标请求，如下图<code>gdBBBRZDQ</code>，每天他的链接都会变的，所以你的可能跟我不一样，还有就是每周二他会更换js代码，所以我们的目标就是这个<code>sensor_data</code>.<br><img src="https://tuchuang.voooe.cn/images/2024/02/20/imagee13a680e8fce11b8.png" alt="imagee13a680e8fce11b8.png"></p><p>2.然后通过跟栈找到我们<code>sensor_data</code>的生成位置，会解混淆的可以解混淆再替换分析，我不太熟练就直接来了，如下图，我们可以看到它是由一些小东西连接起来的.<br><img src="https://tuchuang.voooe.cn/images/2024/02/20/image592c11e0d0424565.png" alt="image592c11e0d0424565.png"></p><p>3.我们继续往上看，发现一切都是由一个58位数组生成的，这里面肯定暗藏玄坤.我的思路是通过文本比较比较每次请求的58位数组查看他们的变化,然后我们可以发现4次请求分别变化了的位数.<br><img src="https://tuchuang.voooe.cn/images/2024/02/20/imageb9693c07264d51f7.png" alt="imageb9693c07264d51f7.png"></p><blockquote><p>第一次变化 1 25 53<br>第二次变化 1 13 23 25 39 49 51 53 57<br>第三次变化 1 17 23 25 41 43 45 53<br>第四次变化 1 9 13 17 21 23 25 53</p></blockquote><p>4.所以我们先冲第1位开始看，我们定位到第1位生成的地方，我们发现是<code>EH</code>方法生成的，我们跟进去.我们慢慢分析可以发现，这个参数和<code>Ua</code>以及一些<code>屏幕的宽高</code>有关.<br><img src="https://tuchuang.voooe.cn/images/2024/02/20/imagec06325c3281da41f.png" alt="imagec06325c3281da41f.png"><br><img src="https://tuchuang.voooe.cn/images/2024/02/20/image0b2c015e5af6968c.png" alt="image0b2c015e5af6968c.png"><br><img src="https://tuchuang.voooe.cn/images/2024/02/20/image8199fa8b5fd7f18f.png" alt="image8199fa8b5fd7f18f.png"><br><img src="https://tuchuang.voooe.cn/images/2024/02/20/image093a498c8cebec35.png" alt="image093a498c8cebec35.png"><br><img src="https://tuchuang.voooe.cn/images/2024/02/20/image3a34be511e7aca2e.png" alt="image3a34be511e7aca2e.png"><br>5.我们继续分析第25位，发现是一些时间相关的统计，还有<code>_abck</code>、浏览器指纹等等组合而成.<br><img src="https://tuchuang.voooe.cn/images/2024/02/20/imagec8b2216907ed9ea0.png" alt="imagec8b2216907ed9ea0.png"><br><img src="https://tuchuang.voooe.cn/images/2024/02/20/imagecfcbac1e37149a59.png" alt="imagecfcbac1e37149a59.png"><br><img src="https://tuchuang.voooe.cn/images/2024/02/20/imageec20cccd92952fd2.png" alt="imageec20cccd92952fd2.png"><br><img src="https://tuchuang.voooe.cn/images/2024/02/20/imagee065cb83efb92500.png" alt="imagee065cb83efb92500.png"><br><img src="https://tuchuang.voooe.cn/images/2024/02/20/image2cd7b1ce268db41d.png" alt="image2cd7b1ce268db41d.png"><br>6.接下来继续看第53位，可以发现是一个<code>RB</code>方法，传入了一个有着时间记录、第1位加密数据以及鼠标移动轨迹的对象，然后生成了<code>|</code>分割的字符串.我们跟进去看就会发现，它只使用了对象中的<code>startTimestamp</code>这个数值.<br><img src="https://tuchuang.voooe.cn/images/2024/02/20/imagefcfa0aa467463696.png" alt="imagefcfa0aa467463696.png"><br><img src="https://tuchuang.voooe.cn/images/2024/02/20/image7fbedd0822fa675a.png" alt="image7fbedd0822fa675a.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">param_90_obj = &#123;</span><br><span class="line">    <span class="string">&quot;startTimestamp&quot;</span>: <span class="number">1708433699852</span>,</span><br><span class="line">    <span class="string">&quot;deviceData&quot;</span>: param_100,</span><br><span class="line">    <span class="string">&quot;mouseMoveData&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;totVel&quot;</span>: <span class="number">11355845</span>,</span><br><span class="line">    <span class="string">&quot;deltaTimestamp&quot;</span>: <span class="number">492150</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> randomCompute = <span class="title class_">Math</span>.<span class="title function_">floor</span>((<span class="number">100000</span> * <span class="title class_">Math</span>.<span class="title function_">random</span>()) + <span class="number">10000</span>);</span><br><span class="line"><span class="keyword">var</span> startTimestamp = param_90_obj[<span class="string">&#x27;startTimestamp&#x27;</span>] * randomCompute;</span><br><span class="line"><span class="keyword">var</span> param_90 = [<span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">sqrt</span>(startTimestamp), <span class="number">10</span>), randomCompute].<span class="title function_">join</span>(<span class="string">&quot;|&quot;</span>);</span><br></pre></td></tr></table></figure><p>7.接下来的几次请求也就是分别像数组中添加字体及字体数据加密、鼠标移动轨迹、点击轨迹、页面可见性、canvas指纹、固定设备固定值等等，只要你足够耐心，慢慢跟肯定没问题的啦！<br>8.还有就是存在的ja3指纹鸟，你可以使用<code>tls_client</code>或者<code>curl_cffi</code>库，都是可以解决的啦，刚把得哟！附上成功截图留念一下，小成功嘻嘻！<br><img src="https://tuchuang.voooe.cn/images/2024/02/20/imagef53fe2aea6b2bccd.png" alt="imagef53fe2aea6b2bccd.png"></p>]]></content>
      
      
      <categories>
          
          <category> Js逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> akamai </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>227小记</title>
      <link href="/posts/46089/"/>
      <url>/posts/46089/</url>
      
        <content type="html"><![CDATA[<h3 id="记录一次227滑块的小细节"><a href="#记录一次227滑块的小细节" class="headerlink" title="记录一次227滑块的小细节"></a>记录一次227滑块的小细节</h3><p>ps：<code>本文是在经过ast解控制流替换文件后进行操作</code></p><p>1.首先搜索进入到如下图所示的页面<br><a href="https://tuchuang.voooe.cn/image/zN0NI"><img src="https://tuchuang.voooe.cn/images/2024/01/10/173811d761fd20b04bc06e1a9d2e7c0.md.png" alt="173811d761fd20b04bc06e1a9d2e7c0.md.png"></a><br>2.在全局新建一个index，并且在下图部分插入<br><a href="https://tuchuang.voooe.cn/image/zN4HO"><img src="https://tuchuang.voooe.cn/images/2024/01/10/bf50ee803e6b47c653199aebcf88903.md.png" alt="bf50ee803e6b47c653199aebcf88903.md.png"></a><br>3.通过条件断点控制进入我们想要进入的流程<br><a href="https://tuchuang.voooe.cn/image/zN74u"><img src="https://tuchuang.voooe.cn/images/2024/01/10/682f2afa4e08a7e2e601efec75e1cd4.md.png" alt="682f2afa4e08a7e2e601efec75e1cd4.md.png"></a><br>4.hook一下concat方法，因为都是通过这个方法连接起来的，自己大致看一下就可以发现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat_</span> = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat</span> = <span class="keyword">function</span>(<span class="params"><span class="variable language_">arguments</span></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;合并之前的数组：&quot;</span>,<span class="variable language_">this</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;预合并的数组：&quot;</span>,<span class="variable language_">arguments</span>)</span><br><span class="line">temp = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">concat_</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;合并后的数组：&quot;</span>,temp)</span><br><span class="line"><span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.搜索<code>O = 227</code>找到加密生成的尾部进行断点，然后执行到此，就会发现打印出了我们想要了解到的信息<br><a href="https://tuchuang.voooe.cn/image/zNB1N"><img src="https://tuchuang.voooe.cn/images/2024/01/10/d947147683767f28fc11e383d3d8571.md.png" alt="d947147683767f28fc11e383d3d8571.md.png"></a><br>6.然后可以打开两个页面进行此操作，对比输出的数组，看看哪些是固定的，哪些是变化的，变化的直接通过条件断点控制流程进行详细分析即可</p><p>7.加密扣完之后需要涉及到轨迹，轨迹的各项数据详细分析如下<br><a href="https://tuchuang.voooe.cn/image/zNYmK"><img src="https://tuchuang.voooe.cn/images/2024/01/10/image.md.png" alt="image.md.png"></a><br>8.自己想办法生成轨迹，进行通过即可<br><a href="https://tuchuang.voooe.cn/image/zNk2H"><img src="https://tuchuang.voooe.cn/images/2024/01/10/9c1c5be917f214b2b631f70262ef761.md.png" alt="9c1c5be917f214b2b631f70262ef761.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Js逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 滑块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我言秋日胜春朝</title>
      <link href="/posts/61420/"/>
      <url>/posts/61420/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PS3 </tag>
            
            <tag> Games </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
